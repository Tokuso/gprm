// Tile.rb
//   
// :title: Service-based SoC project - SBA Tile class
//
//
// *
// *  (c) 2004-2009 Wim Vanderbauwhede <wim@dcs.gla.ac.uk>
// *  
//
// $Id: Tile.rb 2532 2009-04-22 16:15:08Z socgroup $

// ****** Code generated from /home/ashkan/Gan04/Garnet/SBA/Tile.rb by ../../util/r2n.pl on Sun Apr 22 17:14:10 2012 ******
// ****** DO NOT EDIT (unless you know what you're doing) ******




#include "System.h"
#include "Tile.h"
// The SBA Tile is the interface between the Service Manager and the Network.
// It transfers data from the Network tx_fifo to a local rx_fifo 
// and from the local tx_fifo to the Network rx_fifo


    //-- ----------------------------------------------------------------------------
    //
    // Main methods
    //
    
using namespace std;
using namespace SBA;
/*
	def run(sba_system)
      if @transceiver.rx_fifo.has_packets()
        @status=true
        while (@status==true)
            @service_manager.run()	
    		if (@service_manager.core_status==CS_busy)
        		@service_core.run()
    		end
            @transceiver.run()
            @status = (true and (@service_manager.status or (@transceiver.tx_fifo.length>0) or (@transceiver.rx_fifo.length>0)))
        end
      end
    end
*/


void Tile::run() {
        //System& sba_system=*((System*)sba_system_ptr);
    if (transceiver.rx_fifo.has_packets()) { // WV15122010: was .length()>0
        status=true; 
        while (status==true) {
            service_manager.run();        
            if (service_manager.core_status==CS_busy) {
                service_core.run();
            }
    	    transceiver.run();
            status= true && (service_manager.status || (transceiver.tx_fifo.length()>0) || (transceiver.rx_fifo.length()>0));
        }
    }
} //  of run()

#if USE_THREADS==1
    void *SBA::run_tile_loop(void* voidp) { 
        SBA::Tile* tilep = (SBA::Tile*)voidp;
        while (1) { 
            tilep->run(); 
        }
        pthread_exit((void *) 0);
    }
    void Tile::run_th () {
#ifdef VERBOSE    
    cout << "Starting Tile " << service << "\n";
#endif // VERBOSE 
        pthread_attr_init(&attr);
        pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
        pthread_create(&tid, &attr, SBA::run_tile_loop, (void*)this);
        cout << "Thread ID: " << tid << "\n"; 
    }        
#endif // USE_THREADS==1   
#if DISTR==1
    void SBA::run_proc()
#ifdef VERBOSE
        cout << "Starting Tile "<<service<<"\n";
#endif // VERBOSE 
            while (true) {
                run();
            }
    }
#endif // DISTR

